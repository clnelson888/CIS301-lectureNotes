HW 8 due tonight

    #5: prove that if n is a positive integer, then
        n^5 - n is divisible by 5

        hint: you will need to expand out the polynomial
            (k+1)^5 - (k+1)



    #6: prove that if n is natural number, then:

            1*1! + 2*2! + ... + n*n! = (n+1)! - 1

        5! = 

        6! = 

        n! = 

        (n+1)! = 

        (n+2)! = (


HW 9 will be posted after class

////////////////////////////////////////////

Today:
- Continue mathematical induction
- Recursive definitions
- Begin survey of proof techniques

////////////////////////////////////////////

Reminder: Induction template.

1) Label the base case. Prove the claim is true for the smallest element 
    in your domain.


2) Label the inductive step. State the inductive hypothesis:
        "We assume the inductive hypothesis: that <insert claim> holds 
        for some fixed k in <insert domain>."

    Prove that the claim holds for k+1 (you will need to use your inductive
    hypothesis).


3) Summarize: "It follows by induction that <insert claim> holds 
    for all <insert domain>."

//////////////////////////////////////////////

Example: Prove that the sum of the first n odd numbers is n^2.

    (what is our domain?)


How can we express the sum of the first n odd numbers more formally?



So, what is our claim?



Proof by induction.


/////////////////////////////////

Example: Prove that 3^n - 1 is even for all positive integers n.


what does "even" mean? 



Proof by induction.



//////////////////////////////////


Recursively defined functions.


To define a function whose domain is the set of natural numbers
(or some other set of integers with a lowest value)

Base case: Specify the value of the function at 1 (or some other
    lowest value). (There may be more than one base case.)


Recursive step: Give a rule for finding the value of the function
    at all bigger integers in our domain using its smaller values




//////////////////////////////////

Example (domain: all natural numbers, 1 and up):

f(1) = 3
f(n) = 2f(n-1) + 3, for n > 1


What is f(3)?






//////////////////////////////////

What does this define?

g(1) = 1
g(n) = n * g(n-1), for n > 1

n  | g(n)
---------
1  | 
2  | 
3  | 



//////////////////////////////////

Consider this pattern: 1, 2, 4, 7, 11, 16, 22, ...

Write a recursive definition.

Over natural numbers.

Base case?
Recursive case?


////////////////////////////////

Recursively defined sets:


Consider the subset S of the set of integers, defined as:

Base case: 1, 2 ∈ S

Recursive case: x ∈ S ⋀ y ∈ S → xy ∈ S

--> what are the elements in S?






///////////////////////////////

Write a recursive definition for the set {1, 3, 5, 7, ...}




////////////////////////////////

(in-class quiz)


////////////////////////////////

∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

/////////////////////////////////

Now we will look at more informal proofs.

--> why? (prove programs are correct, prove running time,
    prove systems are secure, make inferences, prove specifications
    are consistent, etc.)

///////////////////////////////

Definitions.


An integer n is *even* if n = 2k for some k ∈ ℤ.



An integer n is *odd* if n = 2k + 1 for some k ∈ ℤ.



Any integer that is not odd is even,
and any integer that is not even is odd.


///////////////////////////////

Direct (conditional) proof


- Often want to prove things of the form: "If P, then Q"

--> how would we do this with natural deduction?





/////////////////////////////

Direct proof template. If P, then Q

Assume P
...
Q





/////////////////////////////

Example: prove that the product of two even integers is even.


If our domain is integers and we have the predicate Even(x), how
would you write this statement in predicate logic?





What's the idea of proving this in predicate logic?




Direct proof:




--> How is our proof similar to natural deduction?

//////////////////////////////

Next time:
- More proof techniques