// BEGIN FILE: tuesMarch25_notes.txt
// ------------------------------
Exam 2 discussion.

High: 100/100 
Average: 75/100

A (90-100): 8 students
B (80-89): 11 students
C (70-79): 7 students
D (60-69): 7 students
F (below 60): 7 students

Briefly discuss exam.

Exam grades in Canvas
- drops lowest among Exam 1, Exam 2, Exam 3,
    *midterm equivalent from final*

- what does this mean with the final exam?

////////////////////////////////////////////////////

HW 7 will be posted after class, due Tues April 1

////////////////////////////////////////////////////

Today:

- exists elimination rule
- proving DeMorgan's laws for quantifiers
- soundness and completeness in predicate logic
- begin mathematical induction, if time

/////////////////////////////////

Exists elimination - ExistsE[T]

Idea: we know a statement is true for *some* individual
Create an alias for that anonymous individual

If we can reach a conclusion that does NOT use that alias
    ...we know that conclusion is valid, since
    there WAS such an individual


Rule summary:

                                 Let ((a: T) => SubProof(
                                    Assume( P(a) ),
            ∃((x: T) => P(x))       ...
                                    Q
                                 )),
ExistsE[T]: ----------------------------------------------------
                     Q

"a" is our alias for the x where P(x) held
"a" needs to be a "fresh" name (unused before)
Q CANNOT include anything about "a"



Syntax:

1 ( ∃((x: T) => P(x)) )         by Justification,
2 Let ((a: T) => SubProof(
    3 Assume ( P(a) ),
    ...
    4 ( Q )                     by Justification
)),
5 ( Q )                         by ExistsE[T](1, 2)



--> Think of ExistsE like OrE
    ∃ x P(x) means: P(n1) V P(n2) V ... V P(nk)


Use ExistsE in the SAME situations you would use OrE


//////////////////////////////

Examples:

(exists1.sc)
∀ x (Human(x) → Mortal(x)), ∃ x (Human(x)) ⊢ ∃ x (Mortal(x))



///

(exists2.sc)
∀ x (P(x) → ¬Q(x)) ⊢ ¬(∃ x (P(x) ^ Q(x)))

x is students

    P(x): student x attends K-State
    Q(x): student x attends KU

    --> what is this argument saying?

∀ x (P(x) → ¬Q(x)): everyone who attends K-State doesn't attend KU

¬(∃ x (P(x) ^ Q(x))): there isn't an individual who attends both
                        K-State and KU


////////////////////////////

(in-class quiz)

////////////////////////////

<------ stopped here, will continue on Thursday

/////////////////////////////

Proof tactics for predicate logic

- see if you can do anything right away with the premises
    Which rules? 

- look at top-level operator for what you are trying to prove
    trying to prove a "for all" statement with ∀?


    trying to prove a "there exists" statement with ∃?

        do I have that statement about a particular individual?

        could I use AllE for an individual with an all statement?

        do I have a "there exists" statement as a claim?

        do I have an OR statement as a claim?

        really can't find anything? 


    trying to prove -> 


    trying to prove ¬(something)



    trying to prove an OR
        can you get one side? 

        do you have an OR statement already? 

        do you have an "exists" statement? 


    trying to prove an AND
        first approach?

        no luck? 


    -->when you are in a subproof?


    Unsure what to do?


////////////////////////////////////////

Proving DeMorgan's laws 

//demorgan1.sc
∀ x ¬P(x)       equivalent to       ¬(∃ x P(x))

/////////////////////////////////////

//demorgan2.sc
∃ x ¬P(x)       equivalent to       ¬(∀ x P(x))

////////////////////////////////////////

Soundness and completeness of predicate logic.


Soundness: definition?

    propositional:

    predicate logic:




Completeness: definition?

    propositional:

    predicate logic:



///////////////////////////////////

Same argument might be VALID in one domain and INVALID in another

- deduction can only prove arguments that are valid in ANY domain
- we can't prove all valid arguments


Domain with integers with operations like +


All integers? 2 + 3 = ?


Subset (0,1,2,3,4) of integers. 2 + 3 = ?



////////////////////////////////////


Godel's Incompleteness Theorem.

Any consistent formal system where integer arithmetic is
carried out is incomplete -- there will be true statements
that cannot be proved.

(depends on interpretations)

/////////////////////

Next time:
- mathematical induction
--> what have you done before?
// END FILE: tuesMarch25_notes.txt

// BEGIN FILE: thursMarch27_notes.txt
// ------------------------------
HW 7 due Tuesday, April 1

--> accessing old in-class quizzes

/////////////////////////

Today:
- proof tactics for predicate logic
- prove (some) of DeMorgan's laws for quantifiers
- begin mathematical induction

/////////////////////////

Proof tactics for predicate logic

- see if you can do anything right away with any claims
    Which rules? 

    for all statement, individual: use AllE with that individual
    claim about a particular individual: *could* use ExistsI to
        make a there exists statement (not always useful, but doesn't hurt)



- look at top-level operator for what you are trying to prove
    trying to prove a "for all" statement with ∀?

        use AllI subproof

        name a random individual
            by end of subproof: prove our goal about that individual
        use AllI to conclude the statement for all individuals


    trying to prove a "there exists" statement with ∃?

        do I have that statement about a particular individual?
            ExistsI with that statement


        could I use AllE for an individual with an all statement?
            trying to prove ∃ x P(x)
            have individual, maybe "a"
            have ∀ x P(x)

                use AllE to get P(a)
                use ExistsI to get ∃ x P(x)



        do I have a "there exists" statement as a claim?
            use ExistsE

            have ∃ x P(x)
            want: ∃ x Q(x)

            ExistsE subproof, alias "a" for the ∃ x P(x)
                assume P(a)
                ...
                goal: ∃ x Q(x)
            afterwards, use ExistsE to pull out ∃ x Q(x)



        do I have an OR statement as a claim? want ∃ x Q(x)
            use OrE 

            subproof: assume LHS:
                end subproof with ∃ x Q(x)
            subproof: assume RHS:
                end subproof with ∃ x Q(x)
            afterwards, use OrE to conclude ∃ x Q(x)




        really can't find anything? try PbC
            want ∃ x Q(x)

            subproof where we assume NOT (∃ x Q(x))
                try to get F



    (use our propositional logic approaches to prove a top-level operator
    of AND, OR, NOT, IMPLIES)



    -->when you are in a subproof?



    Unsure what to do?




////////////////////////////////////////

Proving DeMorgan's laws 

//demorgan1.sc
∀ x ¬P(x)       equivalent to       ¬(∃ x P(x))

/////////////////////////////////////

//demorgan2.sc
∃ x ¬P(x)       equivalent to       ¬(∀ x P(x))

////////////////////////////////////////

Example:

We want to prove that for any positive integer n:

    1 + 2 + ... + n = n*(n+1)/2


(Carl Gauss)


Try it out first.
    n = 1?
        1 =? 1(2)/2 = 1 yes!

    n = 2?
        1 + 2 = 3
        2(3)/2 = 3

    n = 3?
        1+2+3 = 6
        3(4)/2 = 6




Have we proved it yet?



///////////////////////////////////////////

Mathematical induction.

Tool for proving some claim P(n) holds for all natural numbers n



The induction domino effect:

    ( P(1) ∧ ∀ k (P(k) → P(k+1)) ) → ∀ n P(n) 




What is this saying?
    P(1)? base case. I need to prove that the claim holds for the smallest
        n in the domain.



    ∀ k (P(k) → P(k+1))? inductive step.
        pick a random k in my domain. 
        assume P(k) (inductive hypothesis)
        try to prove P(k+1)




Putting it all together:

( P(1) ∧ ∀ k (P(k) → P(k+1)) ) → ∀ n P(n) 



IF I can prove the base case AND I can prove the inductive step 
THEN I've proved the claim for all n in my domain



////////////////////////////////////

Why are we doing this?

////////////////////////////////////

Revisit our example:

We want to prove that for any positive integer n:

    1 + 2 + ... + n = n*(n+1)/2




Proof by induction.

Base case. We must prove the case for our smallest positive integer,
n = 1. We have that 1 = 1(1+1)/2, so the base case holds.

Inductive step. We assume the inductive hypotheses -- that
    1 + 2 + ... + k = k*(k+1)/2

holds for some fixed positive integer k. We must prove that:
    1 + 2 + ... + k + (k+1) = (k+1)*((k+1)+1)/2

We have that: 
    1 + 2 + ... + k + (k+1) = k*(k+1)/2 + (k+1)   (by inductive hypothesis)
                            = ( k(k+1) + 2(k+1) )/2 (putting over common denominator)
                            = (k+1)(k+2)/2
                            = (k+1)*((k+1)+1)/2

Thus the inductive step holds.


We have proved our claim for all positive integer n.

/////////////////////////////////

(in-class quiz)

/////////////////////////////////

Do you think induction can be used to prove properties for
    ALL integers?

would need a base case, integers don't have a smallest

/////////////////////////////////

Induction template.

1) Label the base case. Prove the claim is true for the smallest element 
    in your domain.


2) Label the inductive step. State the inductive hypothesis:
        "We assume the inductive hypothesis: that <insert claim> holds 
        for some fixed k in <insert domain>."

    Prove that the claim holds for k+1 (you will need to use your inductive
    hypothesis).


3) Summarize: "It follows by induction that <insert claim> holds 
    for all <insert domain>."

/////////////////////////////////

<--- stopped here, will continue on Tuesday

/////////////////////////////////


Example: Prove that the sum of the first n odd numbers is n^2.

    (what is our domain?)


How can we express the sum of the first n odd numbers more formally?



So, what is our claim?



Proof by induction.


/////////////////////////////////

Example: Prove that 3^n - 1 is even for all positive integers n.


what does "even" mean? 



Proof by induction.



//////////////////////////////////

Next:
- more with induction
- survey of other proof techniques
// END FILE: thursMarch27_notes.txt

// BEGIN FILE: demorgan1.sc
// ------------------------------
// #Sireum #Logika

import org.sireum._
import org.sireum.justification._
import org.sireum.justification.natded.pred._
import org.sireum.justification.natded.prop._

// ∀ x ¬P(x)   equivalent to   ¬(∃ x P(x))

//first direction is very similar to exists2.sc
@pure def demorgan1A[T](P: T=>B @pure): Unit = {
  Deduce(
    (
      ∀((x: T) => !P(x))
    )
    |-
    (
      !(∃((x: T) => P(x)))
    )
    Proof(
      1 ( ∀((x: T) => !P(x)) ) by Premise,

      //use NegI to build !(∃((x: T) => P(x)))
      2 SubProof(
        3 Assume ( ∃((x: T) => P(x)) ),

        //now what can we do with line 3?
        //use ExistsE
        4 Let ((alias: T) => SubProof(
          5 Assume ( P(alias) ),
          6 ( !P(alias) ) by AllE[T](1),
          7 ( F ) by NegE(5, 6)
          //goal: F (same as afterwards)
        )),
        8 ( F ) by ExistsE[T](3, 4)
        //goal: F
      ),
      9 ( !(∃((x: T) => P(x)) )           ) by NegI(2)
    )
  )
}

@pure def demorgan1B[T](P: T=>B @pure): Unit = {
  Deduce(
    (
      !(∃((x: T) => P(x)))
    )
      |-
    (
      ∀((x: T) => !P(x))
    )
    Proof(
      1 (  !(∃((x: T) => P(x)))   ) by Premise,
      
    )
  )
}
// END FILE: demorgan1.sc

// BEGIN FILE: demorgan2.sc
// ------------------------------
// #Sireum #Logika
import org.sireum._
import org.sireum.justification._
import org.sireum.justification.natded.pred._
import org.sireum.justification.natded.prop._

// ∃ x ¬P(x)   equivalent to    ¬(∀ x P(x))

@pure def demorgan2A[T](P: T=>B @pure): Unit = {
  Deduce(
    (
      ∃((x: T) => !P(x))
    )
      |-
    (
        !(∀((x: T) => P(x)))
    )
    Proof(
      1 (  ∃((x: T) => !P(x))            ) by Premise,

    )
  )
}

@pure def demorgan2B[T](P: T=>B @pure): Unit = {
  Deduce(
    (
      !(∀((x: T) => P(x)))
    )
      |-
    (
      ∃((x: T) => !P(x))
    )
    Proof(
      1 ( !(∀((x: T) => P(x)) )              ) by Premise,

    )
  )
}

// END FILE: demorgan2.sc

// BEGIN FILE: exists1.sc
// ------------------------------
// #Sireum #Logika

import org.sireum._
import org.sireum.justification._
import org.sireum.justification.natded.pred._
import org.sireum.justification.natded.prop._

// ∀ x (Human(x) → Mortal(x)), ∃ x (Human(x)) ⊢ ∃ x (Mortal(x))

@pure def exists1[T](Human: T=>B @pure, Mortal: T=>B @pure): Unit = {
  Deduce(
    (
      ∀((x: T) => (Human(x) __>: Mortal(x))),
      ∃((x: T) => Human(x))
    )
    |-
    (
      ∃((x: T) => Mortal(x))
    )
    Proof(
      1 ( ∀((x: T) => (Human(x) __>: Mortal(x))) ) by Premise,
      2 ( ∃((x: T) => Human(x)) ) by Premise,
      
      //no obvious pattern, try ExistsE

      3 Let ((alias: T) => SubProof(
        4 Assume( Human(alias) ),
        5 ( Human(alias) __>: Mortal(alias) ) by AllE[T](1),
        6 ( Mortal(alias) ) by ImplyE(5, 4),
        7 ( ∃((x: T) => Mortal(x)) ) by ExistsI[T](6)

        //∃((x: T) => Mortal(x))
      )),
      8 ( ∃((x: T) => Mortal(x)) ) by ExistsE[T](2, 3)

      //∃((x: T) => Mortal(x))
    )
  )
}
// END FILE: exists1.sc

// BEGIN FILE: exists2.sc
// ------------------------------
// #Sireum #Logika

import org.sireum._
import org.sireum.justification._
import org.sireum.justification.natded.pred._
import org.sireum.justification.natded.prop._

// ∀ x (P(x) __>: ¬Q(x)) ⊢ !(∃ x (P(x) & Q(x)))

@pure def exists2[T](P: T=>B @pure, Q: T=>B @pure): Unit = {
  Deduce(
    (
      ∀((x: T) => (P(x)) __>: !Q(x))
    )
    |-
    (
      !(∃((x: T) => (P(x) & Q(x))))
    )
      Proof(
      1 ( ∀((x: T) => (P(x)) __>: !Q(x)) ) by Premise,

      //do NegI
      2 SubProof(
        3 Assume( ∃((x: T) => (P(x) & Q(x))) ),

        //try ExistsE on ∃((x: T) => (P(x) & Q(x)))
        4 Let ((a: T) => SubProof(
          5 Assume( P(a) & Q(a) ),
          6 ( P(a) __>: !Q(a) ) by AllE[T](1),
          7 ( P(a) ) by AndE1(5),
          8 ( Q(a) ) by AndE2(5),
          9 ( !Q(a) ) by ImplyE(6, 7),
          10 ( F ) by NegE(8, 9)

          //goal: F
        )),
        11 ( F ) by ExistsE[T](3, 4)

        //goal: F
      ),
      12 ( !(∃((x: T) => (P(x) & Q(x)))) ) by NegI(2)
      //use NegI to conclude !(∃((x: T) => (P(x) & Q(x))))
    )
  )
}
// END FILE: exists2.sc

