HW 10 due Tuesday, April 22

Exam 3 is Thursday, April 24
    - will post details by the end of the week
    - will review for the exam some on Tuesday, April 22
    - Rachel will have a review session from 3-5 on Wednesday, April 23 
        in DUE 1118

//////////////////////////////

Today:
- More with verifying functions
- Working with recursive functions
- Loop invariants and loop correctness

///////////////////////////

Finish verification of absolute value function

/////////////////////////////////

Recursive functions

- exactly the same idea

if (base case condition) {
    answer = (something)
} else {

    //what to do here?
    //prove its preconditions based on the 
    //parameters in the recursive call

    recursive call

    //what can we do here?
    // claim postcondition of recursive call as a premise

    answer = (something)
}

//prove postcondition was met in both branches

//if we want some postcondition after an if/else, what do we do?

return answer



/////////////////////////////////

Example (mult_rec.sc):

- multiplication through repeated (recursive) addition
- write function contract
- do verification

////////////////////////////

(in-class quiz)

/////////////////////////////

Validating loops.

while (condition) {
    statements
}

<-- number of iterations? 

definitely: !(condition)

    ...why is this more challenging than an if-statement?


//////////////////////////////

Solution: kind of like mathematical induction

Come up with a loop INVARIANT that summarizes the behavior
in a loop

- invariant should be true before loop begins
- should be STILL true at the end of each iteration


Steps to proving correctness of a loop:
----------------------------------------

1) Prove the invariant is true before the loop begins

    (what is this like in mathematical induction?)
    base case


2) Assume the invariant is true at the beginning of an iteration.
    Prove the invariant still holds at the end of the iteration.

    (what is this like in mathematical induction?)
inductive Steps

invariant is like the inductive hypothesis


/////////////////////////

When loop ends, you know two things:
    1) About the invariant? true


    2) About the loop condition? false




If your loop is in a function, you can use those two pieces
to prove the postcondition of the function.

(And if you can't, you need to make your invariant stronger.)

/////////////////////////

Loop invariant block: just inside the loop


//prove invariants here
while (condition) {
    Invariant(
        Modifies(list all variables modified in loop),
        invariant1,
        invariant2,
        ...
    )

    //use invariants as a premise

    code for the loop

    //prove the invariants still hold
}


/////////////////////////

Example: see code for multiplication with repeated addition
    using a loop (mult_loop.sc)

--> can we use the function contract from recursive implementation?



////////////////////

<-- stopped here, will continue (and finish example) on Tuesday

////////////////////

--> should the test cases/asserts be different?



--> what if the loop condition was "i < y" instead?


/////////////////////

Next time:
- more with loop invariants
- writing recursive definitions for postconditions/
    invariants
- review for exam 3