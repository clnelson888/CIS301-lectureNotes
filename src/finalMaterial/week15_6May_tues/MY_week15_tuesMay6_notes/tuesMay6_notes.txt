HW 11 due today

--> last assignment
--> highly recommend completing even if you plan to drop it


////////////////////////////

Final exam:
    cumulative
    a bit more emphasis on programming logic, content since exam 3
    Friday, May 16 2:00-3:50
    midterm equivalent in Canvas

--> I'll post review material soon

--> we'll spend some time Thursday reviewing

//////////////////////////////

looking for 1-2 CIS 301 UTAs for the fall
email me (juliet@ksu.edu) if interested

//////////////////////////////

Problem 3 on HW 11: reverse a sequence

loops while i < seq.size/2
    swaps elements at i, seq.size-i-1


What does it mean to be reversed?




After i iterations of the loop:
    what has changed?

    what is the same? 



///////////////////////////////////

Problem 4 on HW 11 (sorted): 


///////////////////////////////////

Problem 6 on HW 11: Fan specification

Fan speeds: 0-5
Fan can be on (speeds 1-5) or off (speed 0)
Fan can optionally rotate (but ONLY at speeds 3-5)

Think of it as having two controls:
    1) speed knob (becomes on when 1-5, off when 0)
        --> can only change one speed level at a time

    2) rotation lever

--> since rotation is a DIFFERENT control, changing
    speed can't change rotation


Initially:
    fan off
    speed 0
    rotate off

Global invariants:
    curSpeed >= 0,
    curSpeed <= 5,
    fanOn == true -> curSpeed > 0,
    fanOn == false -> curSpeed == 0,
    rotateOn == true -> curSpeed >= 3


Functions:
    setSpeed(speed: Z)
    turnOn()
    makeRotate()
    stopRotate()



    Fan on, speed 3, rotate on. Can we call setSpeed(2)?
        No, fan would be going too slow to rotate

    Fan off, speed 0, rotate off. Can we call setSpeed(1)?
        Yes, then marked as on

    Fan on, speed 2, rotate off. Can we call setSpeed(0)?
        No, only change by one at a time

    Fan on, speed 3, rotate on. Can we call setSpeed(4)?
        Yes

    Fan on, speed 3, rotate on. Can we call makeRotate()?
        No, already rotating

    Fan on, speed 5, rotate off. Can we call setSpeed(5)?
        No, already at 5

    Fan on, speed 5, rotate off. Can we call setSpeed(6)?
        No, above 5

    Fan on, speed 1, rotate off. Can we call setSpeed(0)?
        Yes, just changing by one, fan marked as off

setSpeed(speed: Z) preconditions?




///////////////////////////

Today:
- termination
- Halting problem
- program specification in practice
- specifying Java programs with JML


///////////////////////////

Termination - whether a program will finish on all inputs


Partial Correctness:
    IF the precondition is satisfied
    THEN we guarantee the postcondition, but only IF the program terminates


Total Correctness:
    IF the precondition is satisfied
    THEN we guarantee the postcondition AND termination


We need to show termination to achieve total correctness


////////////////////////////////////////

Termination with a loop.
    - create measure of how much work is left
        (i.e., how many iterations are left)  --> Should be a nonnegative integer

    - show that the measure DECREASES with each iteration
    - show that if there is no more work to do, then the loop
        has finished

    - see example



Termination with recursion.
    - can use induction



Collatz function.



////////////////////////////////////////

Decidability - whether a problem can be decided one way or another

Halting problem - given a computer program and a set of inputs
    can you write another program to determine if the original
    program will halt for the inputs?

Assume for the sake of contradiction, that we CAN write a program
that will take another program + set of inputs and determine whether 
that program will terminate on those inputs

def Halt(Function, Input):
    if (Function(input) halts) return true
    else return false

Then we can write:
    def DoOpposite(Function):
    if (Halt(Function, Function)): loop forever
    else return (halt)

Then consider DoOpposite(DoOpposite),
    Case 1: DoOpposite(DoOpposite)                  loops forever. Then
                Halt(DoOpposite, DoOpposite)        would return true. that would mean that
                DoOpposite(DoOpposite)              would halt.
    
    Case 2: DoOpposite(DoOpposite)                  halts, then
                Halt(DoOpposite, DoOpposite)        would return false, which means
                DoOpposite(DoOpposite)              would have looped forever


Both cases ended with a contradiciton. 
This means our original assumption is wrong -- we can't write a Halt function.

///////////////////////////

Review: global invariants.

If a file has global invariants.

--> when do they need to hold?
#     # Initially
#     IF calling a function, global invariants must hold
      # BEFORE function call and
      # AFTER function call


--> how to write function contracts for function that change global variables?

requires?
    Whatever restrictions on parameters so that function code doesn't violate global invariants

modifies?
    say what global variables are changed in the function

ensures?
    Describe how global variables changed
        GlobalVariable == (some expression with IN(globalVariable))

//////////////////////////

(in-class quiz)

///////////////////////////

Binary search bug.


    int mid = (low+high)/2;


--> what's the problem? how to fix?

    int mid = low + (high-low)/2


--> how long was it there? original C++ (in 80s)
    in Java until 2006



///////////////////

Timsort bug (Java's Collections sort / Arrays.sort / Python's sort)
    - developed in 2002
    - breaks array into series of runs that are separately sorted
        and merged


--> bug discovered when researchers tried to use formal verification
    to prove correctness in 2015...and were unsuccessful

--> would crash in certain cases when the run lengths became smaller
    than expected


http://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/



///////////////////////////

Java Modeling Language (JML)

    --> There are tools (OpenJML and KeY) that can do
        formal verification of Java programs

    - can verify correctness if you provide JML specifications for:
        - function contracts
        - for loops:
            - loop invariants
            - termination measure

    https://www.openjml.org/tutorial/
    https://www.key-project.org/applications/program-verification/

    --> They are sometimes used to verify Java library functions


///////////////////////////////

JML specification syntax.

See jmlSyntax.txt for a primer


////////////////////////////////


Complete formal verification is not practical in many cases

Halfway option

- Write a formal specification (avoids ambiguity) that
    *could* be used with a verification tool
- Enforce preconditions
- Check postconditions


/////////////////////////////////

Whose job is it to check preconditions?

    --> ...can we enforce in practice?


    --> What to do if preconditions not met? Should we return a dummy
        value?




How to check postconditions?




--> why might this would be preferable to only using test cases?



/////////////////////////////

IntelliJML - does some JML syntax checking

https://gitlab.utwente.nl/fmt/intellijml/-/releases

Download the IntelliJ-1.1.8.jar file

In IntelliJ, File->Settings->Plugins, click the gear, select
    "Load Plugin from Disk", find the jar file



////////////////////////////////////

JMLExample.java


- add function contract checks to each method



///////////////////////////////////////

Global invariants in practice.

--> write globalsAssert method to assert each global invariant

--> where should we call it?




///////////////////////////////////////

See Account example (similar to what we did with Logika)

//////////////////////////////////////

Best practices outside class

- write global invariants
    - considerations for method parameters?

    - considerations for method code?



- write preconditions and postconditions for all methods
    - throw exceptions if your preconditions aren't met



Next level:
- add asserts that global invariants still true at method end

- add asserts for postconditions


--> be careful with documentation


//////////////////////////////////////

Content of CIS 575.


To prove correctness of a function:

   - function contract (preconditions and postconditions)
   - loop invariant for any loops
        - describe progress loop has made so far
        - bound the loop counter
        - describe measure of work (for termination)


The process of proving correctness of a non-Logika algorithm
or function is EXACTLY the same approach we used in Logika.


--> What approach is that?





//////////////////////////////////

Next time: review for final