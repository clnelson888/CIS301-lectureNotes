In the program below, complete the function contract and loop invariant block so the
program (including the assert at the bottom) would be verified in Logika's auto mode.

def addToNeg(a: ZS, pos: Z): Unit = {
    Contract(
        //COMPLETE THE FUNCTION CONTRACT
        Requires(
            pos >= 0,
            pos < a.size
        ),
        Modifies(a),
        Ensures(
            ∀(pos until a.size) (k => In(a)(k) < 0 -> a(k) == In(a)(k) + 1),
            ∀(0 until pos) (k => a(k) == In(a)(k)),
            ∀(pos until a.size) (k => In(a)(k) >= 0 -> a(k) == In(a)(k))
        )
    )
    var i: Z = pos

    while (i < a.size) {
        Invariant(
            //COMPLETE THE LOOP INVARIANT BLOCK
            Modifies(a, i),

            //bound the loop counter
            i >= pos,
            i <= a.size,

            //size doesn't change
            a.size == In(a).size,

            //describe the value of every element in the sequence
            ∀(0 until pos) (k => a(k) == In(a)(k)),
            ∀(pos until i) (k => In(a)(k) < 0 -> a(k) == In(a)(k) + 1),
            ∀(pos until i) (k => In(a)(k) >= 0 -> a(k) == In(a)(k)),
            ∀(i until a.size) (k => a(k) == In(a)(k))
        )

        if (a(i) < 0) {
            a(i) = a(i) + 1
        }

        i = i + 1
    }
}

/////// Test code ////////////
var test: ZS = ZS(-3, -4, 0, 1, -1, 5, 6, -7)

addToNeg(test, 3)

assert (test == ZS(-3, -4, 0, 1, 0, 5, 6, -6))