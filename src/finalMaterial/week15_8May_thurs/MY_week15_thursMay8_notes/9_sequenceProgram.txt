In the program below, complete the function contract and loop invariant block so the
program (including the assert at the bottom) would be verified in Logika's auto mode.

def addToNeg(a: ZS, pos: Z): Unit = {
    Contract(
        //COMPLETE THE FUNCTION CONTRACT
        Requires(
            pos >= 0, 
            pos < a.size
        ),
        Modifies(a),
        Ensures(
            ∀(0 until pos)(k => a(k) == In(a)(k)),                              // Everything out of range
            ∀(pos until a.size)(k => In(a)(k) < 0 -> a(k) == In(a)(k) + 1),     // Everything changed
            ∀(pos until a.size)(k => In(a)(k) >= 0 -> a(k) == In(a)(k)),        // Everything that wasn't negative
        )

        

    )
    var i: Z = pos

    while (i < a.size) {
        Invariant(
            //COMPLETE THE LOOP INVARIANT BLOCK
            Modifies(a, i),

            //Bound the loop counter
            i >= pos,
            i <= a.size,

            //Size doesn't change
            a.size == In(a).size,

            //Describe the value of every element in the sequence
            ∀(0 until pos)(k => a(k) == In(a)(k)),                              // Everything that is out of range
            ∀(pos until i)(k => In(a)(k) < 0 -> a(k) == In(a)(k) + 1),          // Everything in range we have changed
            ∀(pos until i)(k => In(a)(k) >= 0 -> a(k) == In(a)(k)),             // Everything in range we HAVEN'T changed 
            ∀(i until a.size)(k => In(a)(k) >= 0 -> a(k) == In(a)(k)),          // Everything in range it hasn't gotten to yet


        )

        if (a(i) < 0) {
            a(i) = a(i) + 1
        }

        i = i + 1
    }
}

/////// Test code ////////////
var test: ZS = ZS(-3, -4, 0, 1, -1, 5, 6, -7)

addToNeg(test, 3)

assert (test == ZS(-3, -4, 0, 1, 0, 5, 6, -6))