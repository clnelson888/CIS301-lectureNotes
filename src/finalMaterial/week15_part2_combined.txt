// BEGIN FILE: tuesMay6_notes.txt
// ------------------------------
HW 11 due today

--> last assignment
--> highly recommend completing even if you plan to drop it


////////////////////////////

Final exam:
    cumulative
    a bit more emphasis on programming logic, content since exam 3
    Friday, May 16 2:00-3:50
    midterm equivalent in Canvas

--> I'll post review material soon

--> we'll spend some time Thursday reviewing

//////////////////////////////

looking for 1-2 CIS 301 UTAs for the fall
email me (juliet@ksu.edu) if interested

//////////////////////////////

Problem 3 on HW 11: reverse a sequence

loops while i < seq.size/2
    swaps elements at i, seq.size-i-1


What does it mean to be reversed?
    for all positions k,
        new value at k = old value at seq.size-k-1



After i iterations of the loop:
    what has changed?
        first i positions equal the original last i positions
            from (0 until i)
        last i positions equal the original first i positions

    what is the same? 
        the middle is unchanged
            (i until seq.size-i)



///////////////////////////////////

Problem 4 on HW 11 (sorted): model after containsElem

can add a precondition about sequence size


///////////////////////////////////

Problem 6 on HW 11: Fan specification

Fan speeds: 0-5
Fan can be on (speeds 1-5) or off (speed 0)
Fan can optionally rotate (but ONLY at speeds 3-5)

Think of it as having two controls:
    1) speed knob (becomes on when 1-5, off when 0)
        --> can only change one speed level at a time

    2) rotation lever

--> since rotation is a DIFFERENT control, changing
    speed can't change rotation


Initially:
    fan off
    speed 0
    rotate off

Global invariants:
    curSpeed >= 0,
    curSpeed <= 5,
    fanOn == true -> curSpeed > 0,
    fanOn == false -> curSpeed == 0,
    rotateOn == true -> curSpeed >= 3


Functions:
    setSpeed(speed: Z)
    turnOn()
    turnOff()
    makeRotate()
    stopRotate()



    Fan on, speed 3, rotate on. Can we call setSpeed(2)?
        NO, shouldn't allow (fan would be going too slow to rotate)

    Fan off, speed 0, rotate off. Can we call setSpeed(1)?
        Yes, (and would also mark fan as on)

    Fan on, speed 2, rotate off. Can we call setSpeed(0)?
        NO, can only change speed by 1 at a time

    Fan on, speed 3, rotate on. Can we call setSpeed(4)?
        Yes

    Fan on, speed 3, rotate on. Can we call makeRotate()?
        NO, it is already rotating


    Fan on, speed 5, rotate off. Can we call setSpeed(5)?
        NO, it is already at 5 (speed needs to change)


    Fan on, speed 5, rotate off. Can we call setSpeed(6)?
        NO, the speed is out of bounds

    Fan on, speed 1, rotate off. Can we call setSpeed(0)?
        Yes, (and we would mark the fan as off)



setSpeed(speed: Z) preconditions?
    require that speed be either curSpeed+1 or curSpeed-1
        speed needs to be within our bounds
        if rotate is on, then speed should be fast enough

    ensures that curSpeed is changed to speed

///////////////////////////

Today:
- termination
- Halting problem
- program specification in practice
- specifying Java programs with JML


///////////////////////////

Termination - whether a program will finish on all inputs


Partial Correctness:
    IF the precondition is satisfied
    THEN we guarantee the postcondition, but only IF 
        the program terminates


Total Correctness:
    IF the precondition is satisfied
    THEN we guarantee the postcondition AND termination


We need to show termination to achieve total correctness


////////////////////////////////////////

Termination with a loop.
    - create measure of how much work is left
        (i.e., how many iterations are left)
        --> should be a nonnegative integer

    - show that the measure DECREASES with each iteration

    - show that if there is no more work to do, then the loop
        has finished

    - see example



Termination with recursion.
    - can use induction



Collatz function.



////////////////////////////////////////

Decidability - whether a problem can be decided one way or another

Halting problem - given a computer program and a set of inputs
    can you write another program to determine if the original
    program will halt for the inputs?


Assume, for the sake of contradiction, that we CAN write a program
that will take another program + set of inputs and determine whether
that program will terminate on those inputs.

def Halt(Function, Input):
    if (Function(Input) halts) return true
    else return false

Then we can write:

def DoOpposite(Function):
    if (Halt(Function, Function)): loop forever
    else return (halt)


Then consider DoOpposite(DoOpposite).

Case 1: DoOpposite(DoOpposite) loops forever. Then  
    Halt(DoOpposite, DoOpposite) would return true. that
    would mean that DoOpposite(DoOpposite) would halt.

Case 2: DoOpposite(DoOpposite) halts. Then 
Halt(DoOpposite, DoOpposite) would return false, which means
that DoOpposite(DoOpposite) would have looped forever. 

Both cases ended with a contradiction. This means our original
assumption is wrong -- we can't write a Halt function.

///////////////////////////

Review: global invariants.

If a file has global invariants.

--> when do they need to hold?

    Initially
    If calling a function, global invariants must hold 
        BEFORE function call and
        AFTER function call

    global invariants are an unwritten preconditon/postcondition



--> how to write function contracts for function that change 
    global variables?

requires?
    whatever restrictions on parameters so that function code
    doesn't violate global invariants

modifies?
    say what global variables are changed in the function

ensures?
    describe how global variables changed

    globalVariable == (some expression with In(globalVariable))

//////////////////////////

(in-class quiz)

///////////////////////////

Binary search bug.


    int mid = (low+high)/2;


--> what's the problem? how to fix?

    int mid = low + (high-low)/2;


--> how long was it there? original C++ (in 80s)
    in Java until 2006



///////////////////

Timsort bug (Java's Collections sort / Arrays.Sort / Python's sort)
    - developed in 2002
    - breaks array into series of runs that are separately sorted
        and merged


--> bug discovered when researchers tried to prove correctness 
    in 2015...and were unsuccessful

--> would crash in certain cases when the run lengths became smaller
    than expected


http://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/



///////////////////////////

Java Modeling Language (JML)

    --> There are tools (OpenJML and KeY) that can do
        formal verification of Java programs

    - can verify correctness if you provide JML specifications for:
        - function contracts
        - for loops:
            - loop invariants
            - termination measure

    https://www.openjml.org/tutorial/
    https://www.key-project.org/applications/program-verification/

    --> They are sometimes used to verify Java library functions


///////////////////////////////

JML specification syntax.

See jmlSyntax.txt for a primer




IntelliJML - does some JML syntax checking

https://gitlab.utwente.nl/fmt/intellijml/-/releases

Download the IntelliJ-1.1.8.jar file

In IntelliJ, File->Settings->Plugins, click the gear, select
    "Load Plugin from Disk", find the jar file



////////////////////////////////////


Complete formal verification is not practical in many cases

Halfway option

- Write a formal specification (avoids ambiguity) that
    *could* be used with a verification tool
- Enforce preconditions
- Check postconditions

/////////////////////////////////

<-- stopped here-ish, will do a little more with
this material on Thursday

/////////////////////////////////

Whose job is it to check preconditions?

    --> ...can we enforce in practice?


    --> What to do if preconditions not met? Rreturn a dummy
        value?




How to check postconditions?




--> why might this would be preferable to only using test cases?



/////////////////////////////

JMLExample.java


- add function contract checks to each method



///////////////////////////////////////

Global invariants in practice.

--> write globalsAssert method to assert each global invariant

--> where should we call it?




///////////////////////////////////////

See Account example (similar to what we did with Logika)

//////////////////////////////////////

Best practices outside class

- write global invariants
    - considerations for method parameters?

    - considerations for method code?



- write preconditions and postconditions for all methods
    - throw exceptions if your preconditions aren't met



Next level:
- add asserts that global invariants still true at method end

- add asserts for postconditions


--> be careful with documentation


//////////////////////////////////////

Content of CIS 575.


To prove correctness of a function:

   - function contract (preconditions and postconditions)
   - loop invariant for any loops
        - describe progress loop has made so far
        - bound the loop counter
        - describe measure of work (for termination)


The process of proving correctness of a non-Logika algorithm
or function is EXACTLY the same approach we used in Logika.


--> What approach is that?





//////////////////////////////////

Next time: review for final
// END FILE: tuesMay6_notes.txt

// BEGIN FILE: AccountJava.java
// ------------------------------
package week15_6May_tues;

public class AccountJava {
    private int _balance;
    private boolean _elite;

    public int getBalance() {
        return _balance;
    }

    public boolean isElite() {
        return _elite;
    }

    //global invariants
    /*@
        public invariant getBalance() >= 0;
        public invariant isElite() == (getBalance() >= 1000000);
    */

    //asserts the global invariants
    private void globalAsserts() {
        assert getBalance() >= 0;
        assert isElite() == (getBalance() >= 1000000);
    }

    public AccountJava() {
        _balance = 0;
        _elite = false;

        //what should we do here?
        globalAsserts();
    }
    /*@
        requires amount >= 0;
        ensures getBalance() == \old(getBalance()) + amount;
    */
    public void deposit(int amount) {
        //what do we do here?
        if (amount < 0) {
            throw new IllegalArgumentException("deposit amount can't be negative");
        }
        globalAsserts();

        int oldBalance = _balance;

        _balance += amount;

        if (_balance >= 1000000) {
            _elite = true;
        }

        //what do we do here?
        assert getBalance() == oldBalance+amount;

        globalAsserts();
    }

    /*@
        requires amount <= getBalance();
        requires amount > 0;
        ensures getBalance() == \old(getBalance()) - amount;
     */
    public void withdraw(int amount) {
        //what do we do here?

        int oldBalance = _balance;

        _balance -= amount;

        if (_balance < 1000000) {
            _elite = false;
        }

        //what do we do here?
    }
}
// END FILE: AccountJava.java

// BEGIN FILE: JMLExample.java
// ------------------------------
package week15_6May_tues;

public class JMLExample {
    //function contract
    /*@
        requires y >= 0;
        ensures \result == x*y;
    */
    public static int mult(int x, int y) {
        //what should we do here?
        //throw an exception if our precondition isn't met
        if (y < 0) {
            throw new IllegalArgumentException("second parameter must be nonnegative");
        }

        int sum = 0;
        int count = 0;

        while (count < y) {
            sum = sum + x;
            count = count + 1;
        }

        //what should we do here?
        //assert our postcondition

        assert sum == x*y;

        return sum;
    }

    //function contract
    /*@

    */
    public static void changeArray(int[] nums) {
        //what should we do here?

        //save "old" version of nums
        int[] oldElem = new int[nums.length];
        System.arraycopy(nums, 0, oldElem, 0, nums.length);

        int temp = nums[0];
        nums[0] = nums[nums.length-1];
        nums[nums.length-1] = temp;

        //what should we do here?
    }
}

// END FILE: JMLExample.java

// BEGIN FILE: jmlSyntax.txt
// ------------------------------
/*@
    requires precondition;
    ensures postcondition;
*/
public returnType someMethod(someParameters) {

}

precondition/postcondition are predicate logic statements using
    parameters, the return value, and/or public methods


can have several requires and several ensures



Use && for AND, || for OR, ! for NOT



a ==> b - means a implies b

a <==> b - means a iff (if and only if) b.
    Equivalent to (a==>b) && (b==>a)



\result - refers to the return value


\old(something) - refers to the value of "something" at the beginning
    of the method call


These are handy for making statements about arrays:
(\forall declaration; range; body)


(\exists declaration; range; body)



Basic example:

/*@
    requires adults >= 0 && kids >= 0;
    ensures \result == adults*50 + kids*30;
    ensures \result >= 0;
*/
public static int ticketCost(int adults, int kids) {
    return adults*50 + kids*30;
}



Array example:

/*@
    requires nums != null;
    ensures (\forall int k; 0 <= k && k < nums.length; nums[k] == \old(nums[k]) * 2));
*/
public static void doubleEach(int[] nums) {
    for (int i = 0; i < nums.length; i++) {
        nums[i] = nums[i] * 2;
    }
}
// END FILE: jmlSyntax.txt

// BEGIN FILE: term.sc
// ------------------------------
// #Sireum #Logika

import org.sireum._


def mult(x: Z, y: Z): Z = {
    Contract(
        Requires(y >= 0),
        Ensures(Res[Z] == x*y)
    )

    var sum: Z = 0
    var count: Z = 0

    //measure of work? (how many more iterations left?)
    //initially: y more iterations
    //after 1 iteration: y-1

    //in general, y-count is our measure of work

    while (count < y) {
        Invariant(
            Modifies(sum, count),
            count <= y,
            sum == x*count
        )

        //measure of work, y-count

        sum = sum + x
        count = count + 1

        //measure of work, y-count

        //measure should decrease with each iteration
            //it does, since y doesn't change and count gets bigger

        //when I have no work left, then my loop should be done

        //y-count == 0, means y == count, and the loop condition would become false
    }

    return sum
}

def collatz(n: Z): Z = {
    Contract(
        Requires(n > 0),
        Ensures(Res[Z] == 1)
    )

    //what if n is 52?
    //cur = 52->26->13->40->20->10->5->16->8->4->2->1

    var cur: Z = n
    while (cur > 1) {
        Invariant(
            Modifies(cur),
            cur >= 1        //what else could we say?
        )

        if (cur % 2 == 0) {
            cur = cur / 2
        } else {
            cur = 3 * cur + 1
        }
    }

    return cur
}

// END FILE: term.sc

