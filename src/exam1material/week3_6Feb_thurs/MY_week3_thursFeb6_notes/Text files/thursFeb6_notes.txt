HW 3 is due Tuesday, February 11


Exam 1 is Thursday, February 13
    take full time
    closed notes
    all "open ended" - similar structure to HW
    will post practice exam
    will review on Tuesday

Rachel (TA) is having an exam review on Wednesday, February 12 from 3-5 pm 
    in DUE 1118

//////////////////////////

Today:
- Continue natural deduction
- Review proof syntax, AND rules
- OR rules in natural deduction
- Using natural deduction to prove two statements are equivalent
- Equivalent if-statements
- If time, rules for implies operator

//////////////////////////

Want to prove a *sequent* (argument) of the form:

    premises ⊢ conclusion

where *premises* is a comma-separated list.


In truth tables?

    every truth assignment that made each premise true also made the conclusion
    true


Natural deduction?

    pull premises as claims into proof
    apply deduction rules to build new claims
    end with conclusion


//////////////////////////

AND rule summaries.

         P   Q
AndI : ---------
         P ∧ Q


AndI(lineNum1, lineNum2)




///

          P ∧ Q               P ∧ Q
AndE1 : ---------   AndE2 : ---------
           P                    Q




//////////////////////////////////

Reminder: natural deduction proof syntax:

Natural deduction proof syntax.

(premises) ⊢ (conclusion)
Proof(
    1 (  claim          ) by Justification,
    2 (  claim          ) by Justification,
    ...
    10 (  conclusion    ) by Justification
)


--> what justifications so far?

Premise
AndI
AndE1
AndE2




/////////////////////////////////

Prove that ∧ is commutative with natural deduction

andCommute.sc

p ∧ q equivalent to q ∧ p

////////////////////////////////

OR introduction

          P                      Q
OrI1 : ---------        OrI2 : ---------
        P ∨ Q                   P ∨ Q




Syntax:

OrI1(lineWithLeft)
OrI2(lineWithRight)

///////////////////////////////////////////

Example:

(p ∧ q) ⊢ (p ∨ q)
Proof(
    1 ( p ∧ q   ) by Premise,
    2 ( p ) by AndE1(1),
    3 ( p ∨ q ) by OrI1(2)
)

Or, could have done:

(p ∧ q) ⊢ (p ∨ q)
Proof(
    1 ( p ∧ q   ) by Premise,
    2 ( q ) by AndE2(1),
    3 ( p ∨ q ) by OrI2(2)
)





///////////////////////////////////////////

OR elimination


Idea:
- If an OR statement is true, what do we know?

p ∨ q


I know that either p is true, or q is true, (or both)


- What if we can reach the same conclusion no matter which side
    of the OR is true?


then we know that is a valid conclusion overall



Rule summary:


               SubProof(          SubProof(
                  Assume ( P ),      Assume ( Q ),
      P ∨ Q       ...                ...
                  R                  R
               ),                  ),
OrE : ---------------------------------------------
                         R


How does this relate to programming?


if (condition) {
    some result
}
else {
    some result
}

--> what do we know is true here?






///////////////////////////////

Syntax for using OrE:

(some line numbers are removed for ease of reading)

a ( P ∨ Q   )       by Justification,
b SubProof(
    Assume(P),
    ...
    ( R   )         by Justification
),
c SubProof(
    Assume(Q),
    ...
    ( R   )         by Justification
),
d ( R   )           by OrE(a, b, c)


////////////////////////////////

Example: prove that OR is commutative (or1.sc)

p ∨ q       vs      q ∨ p


////////////////////////////////

(in-class quiz)

////////////////////////////////

Do you think we could prove:

p ∨ q ⊢ p ∧ q
Proof(
    1 ( p ∨ q) by Premise,
    2 SubProof(
        3 Assume (p),
        //I get stuck (this does not prove the argument is invali)
    )
)

invalid argument
    p = T , q = F (THIS proves the argument is invalid)
    premise true, conclusion false



////////////////////////////////

Order of operations:

p ∨ q ∨ r

really: (p ∨ q) ∨ r

--> If I used OrE, what would be the two assumes in
    the subproofs?

SubProof(
    Assume ( p ∨ q ),
    ...
),
SubProof(
    Assume ( r )
)


////////////////////////////////

Proving equivalence.

--> how do we prove two statements are equal in truth tables?

two truth tables, one for each statement
showed that for each input (truth assignment), both statements had the same output


--> how do we do it with proofs?

premise |- conclusion

Need TWO proofs to show equivalence, one for each direction

    statement1 |- statement2
    statement2 |- statement1


    statement1 |- statement2 would give you:

    IF statement 1 is true, THEN statement2 is true

    statement1 -> statement2


    statement2 |- statement1 would give you:

    IF statement 2 is true, THEN statement1 is true

    statement2 -> statement1


--> what does this tell you you could do instead of proving equivalence
    with two truth tables?

could do just one truth table:


(statement1 -> statement2) ^ (statement2 -> statement1)

would be a tautology if the two statements were equivalent


////////////////////////////////

Example: prove one of the distributive laws

p ∨ (q ∧ r)     is equivalent to       (p ∨ q) ∧ (p ∨ r)


(orDist1.sc and orDist2.sc)

////////////////////////////////

stopped here, still need to prove other equivalence direction (orDist2.sc)

on Tuesday, will discuss implies elimination rule - this WILL be on exam 1

    (the implies introduction rule will NOT be on exam 1)

////////////////////////////////

Equivalence in if-statements.

Consider this if-statement:

if (extraCredit == true || grade >= 80) {
    if (extraCredit == true || grade <= 90) {
        //do stuff
    }
}

--> translate to propositional logic



--> what is an equivalent, simpler if-statement?


///////////////////////////////////

Implies-elimination, ImplyE

          P, P → Q
ImplyE: -----------
            Q



(This rule is also called "modus ponens")



Example:

//Suppose we know x > 5. What can we conclude?

if (x > 5) {
    y = 17;
}



///////////////////////////////

Syntax for using ImplyE:

a ( P       )   by Justification,
b ( P → Q   )   by Justification,
c ( Q       )   by ImplyE(b, a)


What you type for → 
    __>:

////////////////////////////////////////

Example (imply1.logika):

(p ∧ q) → r,  p → q,  p  ⊢ r



Example (imply2.logika):

p → r,  q → r,  p ∨ q  ⊢ r


////////////////////////////////////////

Next time:
- Finish rules for implies operator (these WILL be on exam 1)
- Review for exam

