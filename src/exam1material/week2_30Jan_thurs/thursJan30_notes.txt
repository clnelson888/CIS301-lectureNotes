HW 2 due Tuesday, February 4

--> will be creating 2 image files

--> make sure those are added to your git repository!

////////////////////////////

Today:
- one more parse tree
- begin propositional logic
- equivalent statements
- satisfiability

////////////////////////////////////////

Reminder: parse trees

Example: p ∨ q ∧ r → ¬p → ¬q ∨ s

////////////////////////////////////////

Propositional logic.


- a set of *propositional atoms* (statements that can be T/F)
    --> these will be our boolean variables in logic statements
    --> minimal (don't contain any logical operators)



- connected by logical operators



- join together to make new *propositions* (logical sentences)
    that can be true or false



////////////////////////////////////////

Which ones are propositions? Propositional atoms?


Today is Thursday.
    proposition
    propositional atom


What time is it?
    not a proposition, not a propositional atom


x == 2
    proposition, propositional atom


x != 2
    proposition, NOT a propositional atom


Pigs can fly.
    proposition, propositional atom


z != 7 && str.contains(sub)
    proposition, NOT a propositional atom


Drive carefully.
    not a proposition, not a propositional atom


y <= 4  
    proposition, propositional atom



I am hungry and thirsty.
    proposition
    NOT a propositional atom


////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.
    q: It is snowing.
    r: y <= 4
    s: x == 2

How would we express these as English sentences?

    ¬p: It is not below freezing


    p ∧ q: It is below freezing and it is snowing


    p → q : If it is below freezing, then it is snowing


    ¬p → ¬q: If it is not below freezing, then it is not snowing
 


    r ∨ s: y <= 4 || r == 2


    ¬r: y > 4



////////////////////////

Example:

You can't enroll for the course if you haven't taken the prerequisite.


--> what are the propositional atoms?

p: You can enroll for the course
q: you have taken to prerequisite


--> translate to propositional logic:

really saying:
"If you haven't taken the prerequisite, then you can't enroll"


¬q -> ¬p



What is the *contrapositive* of our statement?

p -> q 

contrapositive is: ¬q -> ¬p




/////////////

Example:

if (x <= 2 || y >= 0) {
    if (z != 17) {
        answer = 25;
    }
}

How could we write what our if-statement is doing using propositional logic?

Propositional atoms/translation?

p: x <= 2
q: y >= 0
r: z == 17
s: answer == 25

If all my conditions happen, then answer should be 25

(p ∨ q) ∧ ¬r -> s


//////////////////////////////////

Consider these two statements:

p: I am at least 16 years old
q: I can drive a car


1) If I am at least 16 years old, then I can drive a car.

    p -> q

only false when p = T and q = F

2) I'm not at least 16 years old or I can drive a car.

    ¬p ∨ q

p = T, q = F


--> are they saying the same thing?




--> could we PROVE it? (equiv1.logika, equiv2.logika)

show that for all truth assignments, they have the same output


The statements are logically equivalent because for each possible 
input, they have the same output.






//////////////////////////////////

DeMorgan's Laws.

...DeMorgan has so many laws...
    these are a couple of them.




if (a == 4 || a == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?


if (a != 4 && a != 5)

is the same as


if (!(a == 4 || a == 5))


///

if (a == 4 && b == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?


if (a != 4 || b != 5)


//////////////////////////////

DeMorgan's laws in propositional logic:

¬(p ∨ q) is equivalent to... ¬p ∧ ¬q

¬(p ∧ q) is equivalent to... ¬p ∨ ¬q


--> how can we prove the first of DeMorgan's laws?





////////////////////////

Another if-statement example.

'a'
'0'

if (Character.isDigit(letter) || num < 10) {
    statements
}

--> how would we negate it without using a ! operator?
    also no extra ()

if (!(Character.isDigit(letter) || num < 10))

if ((!Character.isDigit(letter) && !(num < 10)))

if (Character.isDigit(letter) == false && num >= 10)


///////////////////////

And one more. Negate this one:

if ((y >= 4 && num != 14) || x > 0) {
    statements
}

negate it:

if (!((y >= 4 && num != 14) || x > 0))

if ((!(y >= 4 && num != 14) && !(x > 0)))

if ((!(y >= 4 && num != 14) && !(x > 0)))

if ((y < 4 || num == 14) && x <= 0)

///////////////////////

in-class quiz

///////////////////////

Summary of important equivalences (≡ means "is equivalent to").


¬(p ∧ q) ≡ ¬p ∨ ¬q                  (DeMorgan's laws)
¬(p ∨ q) ≡ ¬p ∧ ¬q

p → q ≡  ¬q → ¬p                        (contrapositive)
p → q ≡  ¬p ∨ q                          (can turn implies into an or)


associative laws

    (2 + 3) + 5 = 2 + (3 + 5)

    (p ∧ q) ∧ r     vs    p ∧ (q ∧ r )


    (p → q) → r
    p → (q → r)

    logically equivalent? need two truth tables
    NOT equivalent? find ONE truth assignment where the statements have different
        outputs

        p = F 
        q = T 
        r = F

        (p → q) → r would have (F → T) → F    would be T -> F would be F 
        p → (q → r) would have F → (T → F)  would be F -> (F) would be T 


commutative laws (skipped this, will discuss next week)



--> you may still be asked to demonstrate these with
    truth tables or prove them with natural deduction (coming soon)


//////////////////////////

Summary of equivalence.

How do we prove two statements ARE equivalent?
    need two truth tables, show both statements have same output for every input


How do we prove two statements are NOT equivalent?
    just need one counterexample (truth assignment) that has a different output
        for the two statements



//////////////////////////

What is equivalent to:

¬p → q

(skipped this, recommend thinking through on your own what statements
would be equivalent)

//////////////////////////

are these equivalent? 

    (p → q) → r
    p → (q → r)

How could we show it?

(we showed these were not equivalent earlier on in the notes)

/////////////////////////

Satisfiability.

- definition: a statement is satisfiable if there exists a truth assignment
    that makes the statement true


- what kind of statement is satisfiable? what kind is not?
    satisfiable: contingent, tautology
    not statisfiable: contradictory


- is this satisfiable?

    (p ∨ ¬q) ∧ (q ∨ ¬r) ∧ (r ∨ ¬p)


yes, satisfiable. Just need one truth assignment that makes output true:

p = T
q = T
r = T



to show NOT satisfiable: need to show that ALL truth assignments make
    output false. Would need full truth table.


////////////////////////////

<--- stopped here, will continue next week

///////////////////////////


SAT
straightforward approach to checking all possibilities:




- Aside: P and NP problems

running time programs

can we solve a problem in polynomial time?

can we check a solution to a problem in polynomial time?



////////////////////////

Next time:
- how to prove an argument

