HW 4 posted, due Tues Feb 25

--> this is one of the harder assignments

////////////////////////////////

Today:

- remaining negation rules
- natural deduction proof strategies

////////////////////////////////

Reminder: NegE and NegI.


        P    ¬P
NegE: ----------
          F



        SubProof(
            Assume( P ),
          ... F
        )
NegI: ------------------
              ¬P



//////////////////////////

Review rules so far: not3.sc

////////////////////////////////

Bottom-elimination:

               F
BottomE:  ----------
               Q


//how does this make logical sense?

(think about what we are proving with an argument --
    IF all the premises are true,
    THEN we promise the conclusion is true)




Proof by contradiction (reductio ad absurdum):

        SubProof(
            Assume(¬P),
            ...
            F
        )
PbC:  -------------------
          P


--> Difference between NegI and PbC?

///////////////////////////////////

First examples.

( p, ¬p ) ⊢ ( q )
Proof(
    1 ( p )     by Premise,
    2 ( ¬p )    by Premise,
    3 ( F ) by NegE(1, 2),
    4 ( q ) by BottomE(3)
)


///////////////////////////////////

p: I go for a walk
q: I get coffee

Premises:
p ∨ q: I go for a walk or I get coffee
¬p: I don't go for a walk

Conclusion:
q: I get coffee


( p ∨ q, ¬p ) ⊢ ( q )
Proof(
    1 ( p ∨ q )     by Premise,
    2 ( ¬p )        by Premise,

    //OrE on p ∨ q

    3 SubProof(
        4 Assume( p ),
        5 ( F ) by NegE(4, 2),
        6 ( q ) by BottomE(5)
        //goal: q
    ),
    7 SubProof(
        8 Assume( q )
    ),
    9 ( q ) by OrE(1, 3, 7)

    //goal: q
)


//////////////////////////////////

( ¬¬p ) ⊢ ( p )
Proof(
    1 ( ¬¬p )   by Premise,

    2 SubProof(
        3 Assume ( ¬p ),

        4 ( F ) by NegE(3, 1)
        //goal: F
    ),
    5 ( p ) by PbC(2)

    //use PbC p
)




///////////////////////////////////


( ¬q → ¬p ) ⊢ ( p → q )         //not4.sc


//////////////////////////////////

(in-class quiz)


//////////////////////////////////


( ¬(¬p ∨ ¬q) ) ⊢ ( p ∧ q )     //not5.sc




//////////////////

(skipped for now, will cover Tuesday)

A THEOREM in propositional logic is something that is
always true with no need for premises. For example:


Law of the excluded middle. (LEM)

p ∨ ¬p



What would a theorem be in a truth table?



Prove LEM:

⊢ ( p ∨ ¬p )               //lem.sc



⊢ (theorem that you are trying to prove)

//////////////////////////////////

How do we approach proofs?

1. Write out all the premises
2. Extract all information from premises (AndE, ImplyE)
3. Look at what you are trying to prove (find top level operator)

    ∧ - try to use AndI (prove the LHS of the goal AND,
        prove the RHS of the goal AND)

    ∨ - see if you can prove just the LHS or the RHS of
        the goal OR, then use OrI

        if you have an OR as a premise/claim, try OrE to
            prove conclusion in both subproofs

    → - use ImplyI. Assume LHS of the goal implies, try to
        get to RHS of goal implies.

    ¬(something) - use NegI. Assume "something", try get
        F (contradiction).

    just a propositional atom? look for that propositional atom
        in your current claims. 

        Do you have an OR statement? Try OrE, see if you
            can get that propositional atom in both cases.

        Is negation involved? Try PbC.


After each claim - 
    scan through previous claims, see if can extract extra 
        (esp. implies statements)


Inside a subproof - think about goal for ending the subproof
    you should have a plan for WHICH rule the subproof will use



Doesn't fit a pattern or doesn't work out from above:
    OR statement for OrE, think about PbC



--> when do we open a subproof?

    ONLY when we have a specific rule in mind
    (OrE, ImplyI, NegI, or PbC)



--> can we assume anything in a subproof? 

    yes....but we can only summarize a finished subproof
    with a specific rule (OrE, ImplyI, NegI, or PbC)


/////////////////////////////////

HW 4.

#1: p ∨ q, p → a ∨ b, q → a ∨ b, a → c, b → c ⊢ c
    first step: use OrE on p ∨ q


#2: (p → q) ∨ (p → r) ⊢ p → q ∨ r

    first step: use ImplyI, assume p, try to get q ∨ r
        nest an OrE subproof, assume p → q first and then
        p → r

#3: p ∧ q → r ⊢ p → (q → r)

    use ImplyI, assume p, try to get q → r
        nest another ImplyI, assume q and to get r

#4: ¬(p ∨ q) ⊢ ¬p ∧ ¬q

    first prove ¬p (use NegI, assume p, try get F)
    then prove ¬q (similar)
    use AndI


#5: p → a ∨ b, a → d, q → ¬b, p ∧ q ⊢ d

    separate p, q 
    use p to get a ∨ b
    use q to get ¬b

    use OrE on a ∨ b
        a gets you d 
        b gets you a F, use BottomE to get d



(we'll quickly discuss #6/#7 next Tuesday)

/////////////////////////////////

Next time:
- putting everything together
- soundness and completeness
- proving equivalence (more)
- begin sets